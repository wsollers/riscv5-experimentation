#
# Risc-V Assembler program to print "Hello World!"
# to stdout.
#
# a0-a2 - parameters to linux function services
# a7 - linux function number
#

.global _start      # Provide program starting address to linker

.data
helloworld:      .ascii "Hello World!\n"

main: 
  addi    sp,sp,-32
  sd      ra,24(sp)
  sd      fp,16(sp)
  addi    fp,sp,32
  mv      a5,a0
  sd      a1,-32(s0)
  sw      a5,-20(s0)
  
  # Call the function to write to stdout
  jal  __WRITE_SYSOUT

  
  # Call the function to exit the program
  jal   _EXIT_PROGRAM_


__WRITE_SYSOUT:

  # function prologue
  addi  sp, sp, -16    # allocate stack space
  sd    ra, 0(sp)      # save return address
  sd    fp, 8(sp)      # save callers frame pointer

  addi  a0, x0, 1      # 1 = StdOut
  la    a1, helloworld # load address of helloworld
  addi  a2, x0, 13     # length of our string
  addi  a7, x0, 64     # linux write system call
  ecall                # Call linux to output the string

  # function epilogue
  ld    ra, 0(sp)      # restore return address
  ld    fp, 8(sp)      # restore frame pointer
  addi  sp, sp, 16     # deallocate stack space
  jr    ra             # return from function

_EXIT_PROGRAM_:
  # Setup the parameters to exit the program
  # and then call Linux to do it.

  addi    a0, x0, 0   # Use 0 return code
  addi    a7, x0, 93  # Service command code 93 terminates
  ecall               # Call linux to terminate the program
  # End of program
